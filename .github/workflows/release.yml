env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}
jobs:
  apt:
    if: github.ref_type == 'tag'
    name: APT
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - id: ref
        name: Get the version
        run: |
          ref=${{ github.ref }}
          printf "version=%s\n" ${ref#refs/tags/v} | tee -a $GITHUB_OUTPUT
        shell: bash
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          key: ${{ runner.os }}-buildx-apt-${{ github.sha }}
          path: /tmp/.buildx-apt-cache
          restore-keys: |
            ${{ runner.os }}-buildx-apt-
      - name: Build a docker image
        uses: docker/build-push-action@v5
        with:
          build-args: VERSION=${{ steps.ref.outputs.version }}
          cache-from: type=local,src=/tmp/.buildx-apt-cache
          cache-to: type=local,dest=/tmp/.buildx-apt-cache-new,mode=max
          context: .
          file: conf/apt/Dockerfile
          load: true
          push: false
          tags: |
            ${{ env.IMAGE_NAME }}:apt
      - name: Move cache
        run: |
          rm -fr /tmp/.buildx-apt-cache
          mv /tmp/.buildx-apt-cache-new /tmp/.buildx-apt-cache
      - name: Extract .deb files
        run: |
          docker run \
              --rm \
              ${{ env.IMAGE_NAME }}:apt \
              sh -c 'tar -cf - *.deb' \
            | tar -vxf -
      - name: Archive
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.event.repository.name }}
          path: |
            wol_${{ steps.ref.outputs.version }}_amd64.deb
            wol_${{ steps.ref.outputs.version }}_arm64.deb
            wol_${{ steps.ref.outputs.version }}_armhf.deb
            wol_${{ steps.ref.outputs.version }}_i386.deb
  docker:
    if: github.ref_type == 'tag'
    name: Docker
    needs:
      - apt
      - mingw
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - id: metadata
        name: Get the version
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{major}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{version}}
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          path: /tmp/.buildx-cache
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
      - name: Build a docker image and push it
        uses: docker/build-push-action@v5
        with:
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          context: .
          file: conf/hub/Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ steps.metadata.outputs.tags }}
      - name: Move cache
        run: |
          rm -fr /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
      - name: Patch the description to Docker Hub
        uses: kei-g/dockerhub-patch@main
        with:
          description: Wake-On-LAN Client
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          repo: ${{ github.event.repository.name }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
  github:
    if: github.ref_type == 'tag'
    name: Create a release on GitHub
    needs:
      - apt
      - docker
      - mingw
    runs-on: ubuntu-latest
    steps:
      - id: release
        name: Create a release
        uses: kei-g/github/create-release@main
      - name: Download debian packages from artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ github.event.repository.name }}
          path: debian-packages
      - name: Download MinGW binaries from artifacts
        uses: actions/download-artifact@v3
        with:
          name: mingw-binaries
          path: mingw-binaries
      - name: Upload debian packages and MinGW binaries as assets
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('node:fs')
            const https = require('node:https')
            const uploadAsync = (dir, name, contentType) => {
              const data = fs.readFileSync(`${dir}/${name}`)
              const url = '${{ steps.release.outputs.upload_url }}'.replace(/\{\?name(\,[a-z]+)*\}/g, `?name=${name}`)
              const request = https.request(
                url,
                {
                  headers: {
                    Accept: 'application/vnd.github+json',
                    Authorization: 'token ${{ secrets.GITHUB_TOKEN }}',
                    'Content-length': data.length,
                    'Content-type': contentType,
                    'User-agent': 'GitHub Action',
                    'X-GitHub-Api-Version': '2022-11-28',
                  },
                  method: 'POST',
                }
              )
              const task = new Promise(
                resolve => request.on(
                  'response',
                  response => {
                    const chunks = new Array()
                    response.on('data', chunk => chunks.push(chunk))
                    response.on(
                      'end',
                      () => {
                        const buffer = Buffer.concat(chunks)
                        const response = JSON.parse(buffer)
                        resolve({ name, response })
                      }
                    )
                  }
                )
              )
              request.write(data)
              request.end()
              return task
            }
            const tasks = [
              { dir: 'debian-packages', ext: 'deb', mime: 'vnd.debian.binary-package' },
              { dir: 'mingw-binaries', ext: 'exe', mime: 'exe' },
            ].map(
              source => fs.readdirSync(source.dir).filter(
                name => name.split('.').at(-1) === source.ext
              ).map(
                name => uploadAsync(source.dir, name, `application/${source.mime}`)
              )
            ).flat()
            for (const { name, response } of await Promise.all(tasks))
              console.log({ name, response })
  mingw:
    if: github.ref_type == 'tag'
    name: MinGW
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - id: version
        name: Read the version from 'version.h'
        run: |
          printf 'full=%s\n' \
              $(grep -P '(?<=WOL_VERSION\s\")[0-9]+(\.[0-9]+)+(?=\")' -o version.h) \
            | tee -a $GITHUB_OUTPUT
        shell: bash
      - name: Restore docker layers from the cache
        uses: actions/cache/restore@v3
        with:
          key: wol-${{ steps.version.outputs.full }}-mingw
          path: |
            wol-${{ steps.version.outputs.full }}-mingw.tar
      - name: Extract binaries
        run: |
          tar -vxf wol-${{ steps.version.outputs.full }}-mingw.tar
      - name: Upload binaries
        uses: actions/upload-artifact@v3
        with:
          name: mingw-binaries
          path: |
            wol-${{ steps.version.outputs.full }}-*.exe
name: Release
on:
  create:
    tags:
      - 'v[0-9]+(\.[0-9]+){2}'
