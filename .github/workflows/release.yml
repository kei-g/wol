env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}
jobs:
  apt:
    if: github.ref_type == 'tag'
    name: APT
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - id: ref
        name: Get the version
        run: |
          ref=${{ github.ref }}
          printf "version=%s\n" ${ref#refs/tags/v} | tee -a $GITHUB_OUTPUT
        shell: bash
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          key: ${{ runner.os }}-buildx-apt-${{ github.sha }}
          path: /tmp/.buildx-apt-cache
          restore-keys: |
            ${{ runner.os }}-buildx-apt-
      - name: Build a docker image
        uses: docker/build-push-action@v3
        with:
          build-args: VERSION=${{ steps.ref.outputs.version }}
          cache-from: type=local,src=/tmp/.buildx-apt-cache
          cache-to: type=local,dest=/tmp/.buildx-apt-cache-new,mode=max
          context: .
          file: conf/apt/Dockerfile
          load: true
          push: false
          tags: |
            ${{ env.IMAGE_NAME }}:apt
      - name: Move cache
        run: |
          rm -fr /tmp/.buildx-apt-cache
          mv /tmp/.buildx-apt-cache-new /tmp/.buildx-apt-cache
      - name: Extract .deb files
        run: |
          docker run \
              --rm \
              ${{ env.IMAGE_NAME }}:apt \
              sh -c 'tar -cf - *.deb' \
            | tar -vxf -
      - name: Archive
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.event.repository.name }}
          path: |
            wol_${{ steps.ref.outputs.version }}_amd64.deb
            wol_${{ steps.ref.outputs.version }}_arm64.deb
            wol_${{ steps.ref.outputs.version }}_armhf.deb
            wol_${{ steps.ref.outputs.version }}_i386.deb
  docker:
    if: github.ref_type == 'tag'
    name: Docker
    needs:
      - apt
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - id: metadata
        name: Get the version
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{major}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{version}}
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          path: /tmp/.buildx-cache
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
      - name: Build a docker image and push it
        uses: docker/build-push-action@v3
        with:
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          context: .
          file: conf/hub/Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ steps.metadata.outputs.tags }}
      - name: Move cache
        run: |
          rm -fr /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
      - id: overview
        name: Load README.md
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('node:fs')
            fs.readFile(
              'README.md',
              {},
              (error, data) => {
                if (error)
                  core.setFailed(error.message)
                else
                  core.setOutput('content', data.toString())
              }
            )
      - name: Patch the description to Docker Hub
        uses: kei-g/dockerhub-patch@main
        with:
          description: Wake-On-LAN Client
          overview: |
            ${{ steps.overview.outputs.content }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          repo: ${{ github.event.repository.name }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
  github:
    if: github.ref_type == 'tag'
    name: Create a release on GitHub
    needs:
      - apt
      - docker
      - mingw
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - id: release
        name: Create a release
        uses: actions/github-script@v6
        with:
          script: |
            const { ref, sha } = context
            const child_process = require('node:child_process')
            child_process.exec(
              `git fetch --depth 1 origin +${ref}:${ref}`,
              {},
              () => child_process.exec(
                `git for-each-ref --format='%(contents)' ${ref}`,
                {},
                async (error, stdout, stderr) => {
                  if (error)
                    return core.setFailed(error)
                  const i = stdout.search(/(?<=\n+\s*)Signed\-off\-by\:\s+/g)
                  const j = stdout.search(/(?<=\n+\s*)\-{5}BEGIN\ PGP\ SIGNATURE\-{5}\n{2}/g)
                  const body = i < 0 ? j < 0 ? stdout : stdout.slice(0, j) : stdout.slice(0, i)
                  const { owner, repo } = context.repo
                  const version = ref.slice(11)
                  const response = await github.request(
                    `POST /repos/${owner}/${repo}/releases`,
                    {
                      body,
                      draft: false,
                      name: `Version ${version}`,
                      owner,
                      prerelease: false,
                      repo,
                      tag_name: `v${version}`,
                      target_commitish: sha,
                    }
                  )
                  const { data, status } = response
                  const result = {}
                  switch (status) {
                    case 201:
                      for (const key in data) {
                        const value = data[key]
                        if (typeof value === 'object')
                          continue
                        result[key] = value
                        core.setOutput(key, value)
                      }
                      console.log(result)
                      break
                    case 404:
                      core.setFailed('Not Found if the discussion category name is invalid')
                      break
                    case 422:
                      core.setFailed('Validation failed, or the endpoint has been spammed')
                      break
                    default:
                      core.setFailed(`Unknown error, status=${status}`)
                      break
                  }
                }
              )
            )
      - name: Download debian packages from artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ github.event.repository.name }}
          path: debian-packages
      - name: Download MinGW binaries from artifacts
        uses: actions/download-artifact@v3
        with:
          name: mingw-binaries
          path: mingw-binaries
      - name: Upload debian packages and MinGW binaries as assets
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('node:fs')
            const https = require('node:https')
            const uploadAsync = (dir, name, contentType) => {
              const data = fs.readFileSync(`${dir}/${name}`)
              const url = '${{ steps.release.outputs.upload_url }}'.replace(/\{\?name(\,[a-z]+)*\}/g, `?name=${name}`)
              const request = https.request(
                url,
                {
                  headers: {
                    Accept: 'application/vnd.github+json',
                    Authorization: 'token ${{ secrets.GITHUB_TOKEN }}',
                    'Content-length': data.length,
                    'Content-type': 'application/vnd.debian.binary-package',
                    'User-agent': 'GitHub Action',
                    'X-GitHub-Api-Version': '2022-11-28',
                  },
                  method: 'POST',
                }
              )
              const task = new Promise(
                resolve => request.on(
                  'response',
                  response => {
                    const chunks = new Array()
                    response.on('data', chunk => chunks.push(chunk))
                    response.on(
                      'end',
                      () => {
                        const buffer = Buffer.concat(chunks)
                        const response = JSON.parse(buffer)
                        resolve({ name, response })
                      }
                    )
                  }
                )
              )
              tasks.push(task)
              request.write(data)
              request.end()
            }
            const tasks = [
              { dir: 'debian-packages', ext: 'deb', mime: 'vnd.debian.binary-package' },
              { dir: 'mingw-binaries', ext: 'exe', mime: 'exe' },
            ].map(
              source => fs.readdirSync(source.dir).filter(
                name => name.split('.').at(-1) === source.ext
              ).map(
                name => uploadAsync(source.dir, name, `application/${source.mime}`)
              )
            ).flat()
            for (const { name, response } of await Promise.all(tasks))
              console.log({ name, response })
  mingw:
    if: github.ref_type == 'tag'
    name: MinGW
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Restore docker layers from the cache
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-mingw-cache
          restore-keys: |
            ${{ runner.os }}-buildx-mingw-
      - name: Build
        uses: docker/build-push-action@v3
        with:
          cache-from: type=local,src=/tmp/.buildx-mingw-cache
          context: .
          file: conf/mingw/Dockerfile
          load: true
          push: false
          tags: |
            ${{ env.IMAGE_NAME }}:mingw
      - name: Extract binaries
        run: |
          docker run \
              --rm \
              ${{ env.IMAGE_NAME }}:mingw \
              sh -c 'tar -cf - {i686,x86_64}/wol.exe' \
            | tar -vxf -
          ref=${{ github.ref }}
          version=${ref#refs/tags/v}
          for arch in i686 x86_64; do
            mv $arch/wol.exe wol-${version}-${arch}.exe
          done
        shell: bash
      - name: Upload binaries
        uses: actions/upload-artifact@v3
        with:
          name: mingw-binaries
          path: |
            wol-*.exe
name: Release
on:
  create:
    branches-ignore:
      - '**'
    tags:
      - 'v[0-9]+(\.[0-9]+){2}'
  pull_request:
    branches-ignore:
      - '**'
  push:
    branches-ignore:
      - '**'
